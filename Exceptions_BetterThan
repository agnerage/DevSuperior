import java.util.Date;
import java.util.concurrent.TimeUnit;
import java.text.SimpleDateFormat;
import java.util.Scanner;
import java.text.ParseException;
import java.lang.IllegalArgumentException;

public class Program {

     public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        
       try {
            System.out.print("Room Number: ");
            int number = sc.nextInt();
            System.out.print("Check-in date (dd/MM/yyyy): ");
            Date checkIn = sdf.parse(sc.next());
            System.out.print("Check-out date (dd/MM/yyyy): ");
            Date checkOut = sdf.parse(sc.next());
        
       
            Reservation reservation = new Reservation(number, checkIn, checkOut);
            System.out.println("Reservation: " + reservation);
            
            System.out.println();
            System.out.println("Enter te data to Update the Reservation");
            System.out.print("Check-in date (dd/MM/yyyy): ");
            checkIn = sdf.parse(sc.next());
            System.out.print("Check-out date (dd/MM/yyyy): ");
            checkOut = sdf.parse(sc.next());
            
             reservation.updateDates(checkIn, checkOut);
             System.out.println("Reservation: " + reservation);
       }
       catch (ParseException e){
            System.out.println("Invalid date format");
       }
       catch( IllegalArgumentException e){
            System.out.println("Error in reservation: " + e.getMessage());
       }
       
        
         sc.close();
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    // class Reservation in package entities
    public static class Reservation {
        private Integer roomNumber;
        private Date checkIn;
        private Date checkOut;
        
        private static SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        
        public Reservation(Integer roomNumber, Date checkIn, Date checkOut) {
            this.roomNumber = roomNumber;
            this.checkIn = checkIn;
            this.checkOut = checkOut;
        }
        
        // Getter for roomNumber
        public Integer getRoomNumber() {
            return roomNumber;
        }

        // Setter for roomNumber
        public void setRoomNumber(Integer roomNumber) {
            this.roomNumber = roomNumber;
        }

        // Getter for checkIn
        public Date getCheckIn() {
            return checkIn;
        }

        // Getter for checkOut
        public Date getCheckOut() {
            return checkOut;
        }

        // Method to calculate the duration
        public long duration() {
           long diff = checkOut.getTime() - checkIn.getTime();
           return TimeUnit.MILLISECONDS.toDays(diff); // Convertendo diretamente para dias
          }

        // Update the check-in and check-out dates
        public void updateDates(Date checkIn, Date checkOut) {
            
               Date now = new Date();
               if(checkIn.before(now) || checkOut.before(now)) {
               throw new IllegalArgumentException ("Reservation for update must be future dates");
                }
               if (!checkOut.after(checkIn)) {
               throw new IllegalArgumentException( "Check-out date must be after check-in date");
               }
              
               this.checkIn = checkIn;
               this.checkOut = checkOut;
            
               }
            
            
            
     
        

        @Override
        public String toString() {
            return "Room " 
                + roomNumber 
                + ", check-in: " 
                + sdf.format(checkIn) 
                + ", check-out: " 
                + sdf.format(checkOut) 
                + ", " 
                + duration() 
                + " nights";
        }
    }
}
