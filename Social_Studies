import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class Main {
  public static void main(String[] args) throws ParseException {

    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

    // Criando comentários
    Comment c1 = new Comment("Have a nice trip");
    Comment c2 = new Comment("Wow, that's awesome");

    // Criando o post
    Post p1 = new Post(
      sdf.parse("21/06/2018 13:05:44"),
      "Traveling to New Zealand",
      "I'm going to visit this wonderful country",
      12
    );

    // Adicionando comentários ao post
    p1.addComment(c1);
    p1.addComment(c2);

    // Exibindo o post
    System.out.println(p1);
  }

  // Classe Post
  public static class Post {
    private Date moment;
    private String title;
    private String content;  // Definindo o atributo content
    private Integer likes;
    private static SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

    private List<Comment> comments = new ArrayList<>();

    public Post() {
    }

    public Post(Date moment, String title, String content, Integer likes) {
      this.moment = moment;
      this.title = title;
      this.content = content;
      this.likes = likes;
    }

    // Métodos getter e setter
    public Date getMoment() {
      return moment;
    }

    public void setMoment(Date moment) {
      this.moment = moment;
    }

    public String getTitle() {
      return title;
    }

    public void setTitle(String title) {
      this.title = title;
    }

    public String getContent() {
      return content;
    }

    public void setContent(String content) {
      this.content = content;
    }

    public Integer getLikes() {
      return likes;
    }

    public void setLikes(Integer likes) {
      this.likes = likes;
    }

    public List<Comment> getComments() {
      return comments;
    }

    public void addComment(Comment comment) {
      comments.add(comment);
    }

    public void removeComment(Comment comment) {
      comments.remove(comment);
    }

    // to String method
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder();
      sb.append(title + "\n");
      sb.append(likes);
      sb.append(" Likes - ");
      sb.append(sdf.format(moment) + "\n");
      sb.append(content + "\n");
      sb.append("Comments: \n");
      for (Comment c : comments) {
        sb.append(c.getText() + "\n");
      }
      return sb.toString();
    }
  }

  // Classe Comment
  public static class Comment {
    private String text;

    public Comment() {
    }

    public Comment(String text) {
      this.text = text;
    }

    public String getText() {
      return text;
    }

    public void setText(String text) {
      this.text = text;
    }
  }
}
